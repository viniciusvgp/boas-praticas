# -*- coding: utf-8 -*-
# -*- mode: org -*-

#+STARTUP: overview indent
#+LANGUAGE: pt_BR
#+OPTIONS:   toc:nil
#+TAGS: noexport(n) deprecated(d) ignore(i)
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

#+TITLE:     #1 Instalação de Ferramentas com Spack
#+AUTHOR:    Lucas Mello Schnorr, Vinícius Garcia Pinto
#+EMAIL:     {schnorr, vgpinto}@inf.ufrgs.br

* #1.1 Introdução

Utilizaremos o gerenciador de pacotes ~spack~ para obter, configurar,
compilar e instalar programas e bibliotecas sem permissões especiais
de superusuário. Nesta seção, ilustraremos o funcionamento da
ferramenta com apenas um pacote, um tutorial mais detalhado (em
inglês) pode ser encontrado [[https://spack.readthedocs.io/en/latest/tutorial.html][neste link]].

Primeiramente, precisamos baixar o ~spack~ a partir do repositório ~git~
oficial conforme instruções abaixo. Note que o comando =source= permite
colocar o caminho para =spack= no PATH do terminal.

#+begin_src shell :results output :exports code :session S1 :eval no-export
git clone https://github.com/spack/spack.git
source spack/share/spack/setup-env.sh
#+end_src

Com o ~spack~ podemos instalar diversas ferramentas, incluindo
compiladores. A lista de pacotes disponíveis pode ser obtida com o
comando ~spack list~. Por motivos de espaço, ilustramos abaixo como
listar os pacotes cujo nome inicia com =h=.

#+begin_src shell :results output :exports both :session S1 :eval no-export
cd spack
spack list h*
#+end_src

#+RESULTS:
#+begin_example

==> 50 packages.
h5hut    h5z-zfp      halc     haploview  hc    hdf5-blosc  hepmc    highfive     hisat2  homer       hpctoolkit  hpl   hsakmt  htslib  hugo      hybpiper  hyphy
h5part   hacckernels  hapcut2  harfbuzz   hdf   help2man    heppdt   highwayhash  hisea   hoomd-blue  hpcviewer   hpx   hstr    httpie  hunspell  hydra     hypre
h5utils  hadoop       hapdip   harminv    hdf5  henson      hic-pro  hiop         hmmer   hpccg       hpgmg       hpx5  htop    hub     hwloc     hydrogen

#+end_example

* #1.2 Instalação do pacote de álgebra linear =Chameleon=

O pacote Chameleon não está disponível no repositório padrão do
~spack~. Dessa forma, primeiramente deve ser obtido o reposiório
apropriado com:
#+begin_src shell :results output :exports both :eval no-export
git clone https://gitlab.inria.fr/solverstack/spack-repo.git
#+end_src

O novo repositório pode ser adicionado ao ~spack~ com:
#+begin_src shell :results output :exports both :eval no-export
spack repo add spack-repo
#+end_src

Em seguida, podemos proceder com a instalação:
#+begin_src shell :results output :exports both :eval no-export
spack install chameleon@0.9.2+starpu~mpi~cuda ^starpu@1.3.1~fast~mpi~cuda~openmp~examples
#+end_src

Observe que o comando de instalação especifica tanto a versão do
~Chameleon~ (0.9.2) quanto da dependência ~StarPU~ (1.3.1).

Note que, além do ~StarPU~, o pacote ~Chameleon~ possui diversas outras
dependências que serão gerenciadas automaticamente pelo ~spack~. O
comando ~spack spec~ pode ser usado para conferir quais dependências
serão instaladas:

#+begin_src shell :results output :exports both :eval no-export
spack spec chameleon@0.9.2+starpu~mpi~cuda ^starpu@1.3.1~fast~mpi~cuda~openmp~examples
#+end_src

O comando =spack location= fornece o caminho para a instalação de uma
versão específica. O ~spack~ permite que várias instalações de um mesmo
/software/ coexistam.

#+begin_src shell :results output :exports both :eval no-export
spack location -i chameleon@0.9.2+starpu~mpi~cuda ^starpu@1.3.1~fast~mpi~cuda~openmp~examples
#+end_src

O comando abaixo permite instalar uma segunda versão do ~Chameleon~,
habilitando o suporte à ~MPI~.

#+begin_src shell :results output :exports both :eval no-export
spack install chameleon@0.9.2+mpi+cuda
#+end_src

* Local Variables                                                  :noexport:
# Local Variables:
# eval: (ox-extras-activate '(ignore-headlines))
# eval: (setq org-latex-listings t)
# eval: (setq org-latex-packages-alist '(("" "listings")))
# eval: (setq org-latex-packages-alist '(("" "listingsutf8")))
# eval: (setq ispell-local-dictionary "brasileiro")
# eval: (flyspell-mode t)
# End:
