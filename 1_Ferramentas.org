# -*- coding: utf-8 -*-
# -*- mode: org -*-

#+STARTUP: overview indent
#+LANGUAGE: pt_BR
#+OPTIONS:   toc:nil
#+TAGS: noexport(n) deprecated(d) ignore(i)
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

#+TITLE:     #1 Instalação de Ferramentas com Spack
#+AUTHOR:    Lucas Mello Schnorr, Vinícius Garcia Pinto
#+EMAIL:     {schnorr, vgpinto}@inf.ufrgs.br

* #1.0 Passos iniciais

1. Para entrar no parque computacional, faça o seguinte
   #+begin_src shell :results output
   ssh -i chave.rsa erad@gppd-hpc.inf.ufrgs.br
   #+end_src
2. No parque computacional, criar um diretório para si.
   - Substitua SEUNOME por algo que te identifique unicamente
   #+begin_src shell :results output
   mkdir -p SEUNOME
   #+end_src

Lembre-se
1. Todos os comandos devem ser executados no diretório SEUNOME
4. Existem dois tipos de tarefas
   - *Local*: pode ser feito na máquina do laboratório
   - *Remota*: deve ser feita no parque computacional

* #1.1 Local/Remota: Introdução

Utilizaremos o gerenciador de pacotes ~spack~ para obter, configurar,
compilar e instalar programas e bibliotecas sem permissões especiais
de superusuário. Nesta seção, ilustraremos o funcionamento da
ferramenta com apenas um pacote, um tutorial mais detalhado (em
inglês) pode ser encontrado [[https://spack.readthedocs.io/en/latest/tutorial.html][neste link]].

Primeiramente, precisamos baixar o ~spack~ a partir do repositório ~git~
oficial conforme instruções abaixo. Note que o comando =source= permite
colocar o caminho para =spack= no PATH do terminal.

#+begin_src shell :results output :exports code :session S1 :eval no-export
git clone https://github.com/spack/spack.git
source spack/share/spack/setup-env.sh
#+end_src

Com o ~spack~ podemos instalar diversas ferramentas, incluindo
compiladores. A lista de pacotes disponíveis pode ser obtida com o
comando ~spack list~. Por motivos de espaço, ilustramos abaixo como
listar os pacotes cujo nome inicia com =h=.

#+begin_src shell :results output :exports both :session S1 :eval no-export
cd spack
spack list h*
#+end_src

#+RESULTS:
#+begin_example

==> 50 packages.
h5hut    h5z-zfp      halc     haploview  hc    hdf5-blosc  hepmc    highfive     hisat2  homer       hpctoolkit  hpl   hsakmt  htslib  hugo      hybpiper  hyphy
h5part   hacckernels  hapcut2  harfbuzz   hdf   help2man    heppdt   highwayhash  hisea   hoomd-blue  hpcviewer   hpx   hstr    httpie  hunspell  hydra     hypre
h5utils  hadoop       hapdip   harminv    hdf5  henson      hic-pro  hiop         hmmer   hpccg       hpgmg       hpx5  htop    hub     hwloc     hydrogen

#+end_example

* #1.2 Local: Instalação de duas variantes de =zlib=

Uma primeira versão com as seguintes opções:

#+begin_src shell :results output :exports both :eval no-export
spack install zlib@1.2.8+pic~shared+optimize
#+end_src

Uma segunda versão com as seguintes opções (=optimize= desativado):

#+begin_src shell :results output :exports both :eval no-export
spack install zlib@1.2.8+pic~shared~optimize
#+end_src

Perceba como as duas coexistem com o comando:

#+begin_src shell :results output :exports both :eval no-export
spack find -v zlib
#+end_src

Como usar uma ou outra:

#+begin_src shell :results output :exports both :eval no-export
spack location -i zlib+optimize
spack location -i zlib~optimize
#+end_src

Perceba que o comando =spack location= fornece o caminho para a
instalação daquela versão específica de =zlib=. Tal comando pode ser
utilizado para configurar outro pacote para usar uma ou outra versão.

* #1.3 Remota: Instalação do =MPI=

Esta tarefa é pré-requisito para [[./2_Experimentos.org]].

Vamos fazer uso do =slurm= para instalar algumas versões de OpenMPI no
parque.

Para isso, tenha certaza que no seu _diretório pessoal SEUNOME_ o =spack=
já esteja instalado (isso possivelmente já foi feito na tarefa #1.1).

#+begin_src shell :results output
cd ~/SEUNOME/
git clone https://github.com/spack/spack.git
#+end_src

Agora crie um script para instala cada uma das versões de OpenMPI no parque:
- Conteúdo do arquivo =instala-openmpi-4.slurm=
  #+begin_src shell :tangle instala-openmpi-4.slurm
#!/bin/bash
#SBATCH --nodes=1
#SBATCH --time=01:00:00

source ~/SEUNOME/spack/share/spack/setup-env.sh
spack install -v openmpi@4.0.1
  #+end_src
- Conteúdo do arquivo  =instala-openmpi-3.slurm=
  #+begin_src shell :tangle instala-openmpi-3.slurm
#!/bin/bash
#SBATCH --nodes=1
#SBATCH --time=01:00:00

source ~/SEUNOME/spack/share/spack/setup-env.sh
spack install -v openmpi@3.1.3
  #+end_src
- Conteúdo do arquivo  =instala-openmpi-2.slurm=
  #+begin_src shell :tangle instala-openmpi-2.slurm
#!/bin/bash
#SBATCH --nodes=1
#SBATCH --time=01:00:00

source ~/SEUNOME/spack/share/spack/setup-env.sh
spack install -v openmpi@2.0.4
  #+end_src

*Atenção*: cada instalação leva aproximadamente 8 minutos com 8 cores.

* Old                                                              :noexport:
** Instalação do =spack=                                            :noexport:

#+begin_src shell :results output
git clone https://github.com/spack/spack.git
source spack/share/spack/setup-env.sh 
spack --help
#+end_src

** Instalação de =libboost=                                         :noexport:

Pode-se especificar uma instalação com detalhamento de dependências.

O comando =spack spec= permite ver qual será a materialização da
instalação antes dela ser efetivamente instalada. Abaixo pretende-se
instalar =libboost= com a variante =mpi=, especificando que MPI deve ser
fornecido pelo pacote =openmpi= na sua versão 2.0 e tudo isso no âmbito
do compilador =gcc= na sua versão 8.2.

#+begin_src shell :results output :exports both :eval no-export
spack spec boost@1.69.0+mpi^openmpi@2.0 %gcc@8.2
#+end_src

** Instalação de =hwloc=                                            :noexport:

Neste tutorial instalaremos o pacote ~hwloc~. Este pacote permite obter
a topologia do ~hardware~ da plataforma e pode ser útil na identificação
dos /cores/ físicos e lógicos, dos nós NUMA, dos dispositivos PCI
conectados, da memória RAM entre outros. 

Instalaremos o ~hwloc~ na versão =2.0.2=, habilitando as opções ~pci~ e ~cairo~
e desabilitando as opções ~gl~ e ~cuda~.

#+begin_src shell :results output :exports code :eval no-export
spack install -v hwloc@2.0.2~gl+cairo~cuda+pci
#+end_src

Após a conclusão da instalação, podemos verificar os pacotes
instalados:

#+begin_src shell :results output :exports both :eval no-export
spack find
#+end_src

#+RESULTS:
#+begin_example

==> 34 installed packages
-- linux-debian-x86_64 / gcc@8.3.0 ------------------------------
bzip2@1.0.6    font-util@1.3.1    gettext@0.19.8.1  libbsd@0.9.1         libpng@1.6.34    m4@1.4.18       perl@5.26.2    readline@7.0        xz@5.2.4
cairo@1.16.0   fontconfig@2.12.3  glib@2.56.3       libffi@3.2.1         libsigsegv@2.11  ncurses@6.1     pixman@0.38.0  sqlite@3.26.0       zlib@1.2.11
diffutils@3.7  freetype@2.9.1     gperf@3.0.4       libiconv@1.15        libtool@2.4.6    openssl@1.1.1b  pkgconf@1.6.0  tar@1.31
expat@2.2.5    gdbm@1.18.1        hwloc@2.0.2       libpciaccess@0.13.5  libxml2@2.9.8    pcre@8.42       python@2.7.16  util-macros@1.19.1

#+end_example

Podemos notar que vários outros pacotes além do ~hwloc~ foram
instalados, estes pacotes foram instalados automaticamente pelo ~Spack~
pois são dependências necessárias para a compilação e/ou funcionamento
do ~hwloc~.

** MPI Providers

A interface para troca de mensagens ~MPI~ possui implementação em
diversas distribuições. Com os comandos abaixo podemos verificar quais
pacotes implementam a interface ~MPI~ e, então, escolher qual(is)
instalar. E importante lembrar que várias instalações/configurações
podem coexistir (como vimos acima).

#+begin_src shell :results output :exports both :eval no-export
spack providers mpi
#+end_src

#+RESULTS:
#+begin_example
mpi:
intel-mpi              mpich     mpich@3:   mvapich2  openmpi@1.6.5   openmpi@2.0.0:
charmpp@6.7.1:  intel-parallel-studio  mpich@1:  mpilander  openmpi   openmpi@1.7.5:  spectrum-mpi
#+end_example

** Dependências explícitas                                        :noexport:

Qualquer distribuição instalada pode ser associada a pacotes que
dependem do ~MPI~. Vejamos abaixo como instalar o pacote ~libboost~
utilizando as distribuições ~mpich~ e ~openmpi~.

#+begin_src shell :results output :exports both :eval no-export 
spack install -v boost+mpi^mpich
spack install -v boost+mpi^openmpi
#+end_src
* Local Variables                                                  :noexport:
# Local Variables:
# eval: (ox-extras-activate '(ignore-headlines))
# eval: (setq org-latex-listings t)
# eval: (setq org-latex-packages-alist '(("" "listings")))
# eval: (setq org-latex-packages-alist '(("" "listingsutf8")))
# eval: (setq ispell-local-dictionary "brasileiro")
# eval: (flyspell-mode t)
# End:
