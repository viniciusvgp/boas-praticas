# -*- coding: utf-8 -*-
# -*- mode: org -*-

#+STARTUP: overview indent
#+LANGUAGE: pt_BR
#+OPTIONS:   toc:nil
#+TAGS: noexport(n) deprecated(d) ignore(i)
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

#+TITLE: Tutorial para a Escola Regional de Alto Desempenho
#+AUTHOR:    Lucas Mello Schnorr, Vinícius Garcia Pinto
#+EMAIL:     {schnorr, vgpinto}@inf.ufrgs.br

Este material acompanha os minicurso/tutorial

- *Boas Práticas para Experimentos Computacionais em Clusters* da ERAD/RS 2019 (Três de Maio - RS)
- *Projeto Experimental para Prática com Alto Desempenho* da ERAD/SP 2019 (Campinas - SP)

O material foi preparado na forma de um tutorial auto-guiado para
exercitar, em cenários estimulados, algumas partes das boas práticas
apresentadas no minicurso e tutorial. Ele é dividido em quatro partes,
sugeridas nesta ordem:

1. [[./1_Ferramentas.org][Instalação de Ferramentas com Spack]]
2. [[./2_Experimentos.org][Realização de Experimentos Computacionais]]
3. [[./3_Analise.org][Análise de Dados]]
4. [[./4_Graficos.org][Criação de Gráficos]]

Dados realizar os passos 3 e 4 [[https://filesender.rnp.br/?vid=78b8eb2d-40ae-76e8-2a33-0000795800ce][já foram coletados]].

Confira abaixo uma descrição do ambiente de realização para ter todas
as ferramentas necessárias já instaladas.

* Ambiente

Existem duas formas de realizar o tutorial auto-guiado: utilizando um
container docker com todo o ferramental pré-instalado (veja na
primeira subseção abaixo), ou instalar manualmente todos os
pré-requisitos (a seguir).

** Comece aqui com seu container docker (recomendado)

É sugerido um container docker para a realização do tutorial
auto-guiado, baseado em Debian Linux, com as ferramentas necessárias
previamente instaladas.  Para usá-lo, assumindo que tenhas =docker=
instalado na máquina =host=, basta:

#+begin_src shell :results output
docker pull schnorr/erad19
docker run -it schnorr/erad19
#+end_src

** Comece aqui com seu ambiente Debian Linux (usuários avançados)

Instale as ferramentas abaixo:

#+begin_src shell :results output
apt -y install r-base r-base-core

apt -y install libxml2-dev libssl-dev libcurl4-openssl-dev libgit2-dev
apt -y install libboost-dev 

# Pré-requisitos para Spack
apt -y install git python curl autoconf file

# Pré-requisitos para DoE.base
apt -y install libgmp-dev

# Pré-requisitos para aplicações MPI
apt -y install libopenmpi-dev

# Pacotes R que serão utilizados
echo "install.packages(c('tidyverse', 'devtools', 'DoE.base'), repos = 'http://cran.us.r-project.org')" | R --vanilla
#+end_src

** Construção do container docker (opcional)

Para construí-lo (/docker build/), basta utilizar um Dockerfile com o
conteúdo abaixo, também disponível no arquivo [[./Dockerfile]]. A imagem
foi previamente construída com o seguinte comando (atribuindo a tag
=erad19= para a imagem):

#+begin_src shell :results output
docker build -t erad19 .
docker run -it erad19
#+end_src

#+begin_src fundamental :tangle Dockerfile
FROM r-base:3.5.1

RUN apt update && apt -y upgrade
RUN apt -y install libxml2-dev libssl-dev libcurl4-openssl-dev libgit2-dev
RUN apt -y install libboost-dev 

# Spack
RUN apt -y install git python curl autoconf file

# DoE.base
RUN apt -y install libgmp-dev

# MPI
RUN apt -y install libopenmpi-dev

# R packages
RUN echo "install.packages(c('tidyverse', 'devtools', 'DoE.base'), repos = 'http://cran.us.r-project.org')" | R --vanilla

RUN useradd -s /bin/bash --create-home user
USER user

ENTRYPOINT /bin/bash
WORKDIR /home/user
 #+end_src

* Autoria

- [[http://www.inf.ufrgs.br/~schnorr][Prof. Lucas (http://www.inf.ufrgs.br/~schnorr)]]
- [[http://www.inf.ufrgs.br/~vgpinto][Prof. Vinícius (http://www.inf.ufrgs.br/~vgpinto)]]
