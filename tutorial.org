# -*- coding: utf-8 -*-
# -*- mode: org -*-

#+TITLE:     Boas Práticas para Experimentos Computacionais em Clusters
#+SUBTITLE:  Tutorial Prático
#+AUTHOR:    Lucas Mello Schnorr, Vinícius Garcia Pinto
#+EMAIL:     {schnorr, vgpinto}@inf.ufrgs.br
#+DATE:      11 de abril de 2019

#+STARTUP: overview indent
#+LANGUAGE: pt_BR 
#+OPTIONS:   toc:nil
#+TAGS: noexport(n) deprecated(d) ignore(i)
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

#+LATEX_HEADER: \usepackage[brazilian]{babel}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+LATEX_HEADER: \usepackage[T1]{fontenc}

* Instalação de Ferramentas
#+BEGIN_COMMENT Vinicius
Dependências:
- git
- subversion (svn)
- openmpi
#+END_COMMENT

# Spack
Utilizaremos o gerenciador de pacotes ~Spack~ para obter, configurar,
compilar e instalar programas e bibliotecas sem permissões
especiais. Nesta seção, ilustraremos o funcionamento da ferramenta com
um pacote, um tutorial mais detalhado (em inglês) pode ser encontrado
em: https://spack.readthedocs.io/en/latest/tutorial.html.

Primeiramente, precisamos baixar o ~Spack~ a partir do repositório ~git~
oficial conforme instruções abaixo:
#+begin_src shell :results output :exports code :session S1 :eval no-export
git clone https://github.com/spack/spack.git
#+end_src

Com o ~Spack~ podemos instalar diversas ferramentas incluindo
compiladores. A lista de pacotes disponíveis pode ser obtida com o
comando ~spack list~. Por motivos de espaço, ilustramos abaixo como
listar os pacotes cujo nome inicia com =h=.

#+begin_src shell :results output :exports both :session S1 :eval no-export
cd spack
 ./bin/spack list h*
#+end_src

#+RESULTS:
#+begin_example

==> 50 packages.
h5hut
h5part
h5utils
h5z-zfp
hacckernels
hadoop
halc
hapcut2
hapdip
haploview
harfbuzz
harminv
hc
hdf
hdf5
hdf5-blosc
help2man
henson
hepmc
heppdt
hic-pro
highfive
highwayhash
hiop
hisat2
hisea
hmmer
homer
hoomd-blue
hpccg
hpctoolkit
hpcviewer
hpgmg
hpl
hpx
hpx5
hsakmt
hstr
htop
htslib
httpie
hub
hugo
hunspell
hwloc
hybpiper
hydra
hydrogen
hyphy
hypre
#+end_example

Neste tutorial instalaremos o pacote ~hwloc~. Este pacote permite obter
a topologia do ~hardware~ da plataforma e pode ser útil na identificação
dos /cores/ físicos e lógicos, dos nós NUMA, dos dispositivos PCI
conectados, da memória RAM entre outros. 

Instalaremos o ~hwloc~ na versão =2.0.2=, habilitando as opções ~pci~ e ~cairo~
e desabilitando as opções ~gl~ e ~cuda~.

#+begin_src shell :results output :exports code :eval no-export
./bin/spack install -v hwloc@2.0.2~gl+cairo~cuda+pci
#+end_src

Após a conclusão da instalação, podemos verificar os pacotes
instalados:
#+begin_src shell :results output :exports both :eval no-export
./bin/spack find
#+end_src

Podemos notar que vários outros pacotes além do ~hwloc~ foram
instalados, estes pacotes foram instalados automaticamente pelo ~Spack~
pois são dependências necessárias para a compilação e/ou funcionamento
do ~hwloc~.

* Realização de Experimentos Computacionais
# Reserva de nós (SLURM)
# Coleta de dados (bash)
** Execução de uma aplicação paralelo exemplo
*** Obtenção e Configuração da Aplicação
Utilizaremos como exemplo a aplicação ~BT-MZ~ do conjunto de /benchmarks/
NPB[fn::https://www.nas.nasa.gov/publications/npb.html] (/NAS Parallel
Benchmarks/). A aplicação ~BT~ (/Block Tri-diagonal/) 

#+BEGIN_COMMENT Vinícius
Completar aqui com detalhes do BT em comparação com outros benchmarks
Explicar o MZ (multi-zone)
#+END_COMMENT


#+begin_src shell :results output :exports both :eval no-export
wget https://www.nas.nasa.gov/assets/npb/NPB3.4-MZ.tar.gz
tar -xf NPB3.4-MZ.tar.gz
cd NPB3.4-MZ/NPB3.4-MZ-MPI
cp config/NAS.samples/make.def.gcc_mpich config/make.def
make bt-mz CLASS=A
#+end_src

#+RESULTS:

*** Projeto Experimental
Após a instalação e configuração da aplicação, vamos utilizar o pacote
~DoE.base~ [fn::https://cran.r-project.org/web/packages/DoE.base/] da
linguagem ~R~ para gerar um projeto experimental combinando os fatores a
serem analisados. Neste exemplo, os fatores serão o número de /threads/,
o número de processos (/processes/) e a classe (/class/). As classes nos
/benchmarks/ NAS representam diferentes tamanhos de entrada do problema.

#+begin_src R :results output :exports both :session *R* :eval no-export
library("DoE.base")
library("dplyr")

btmz_erad <-
    fac.design(factor.names=
                   list(threads=c(1, 2), 
                        processes=c(1,2), 
                        class=c("W", "A")),
               replications=2, 
               randomize=TRUE
               )

print(btmz_erad)
#+end_src

#+RESULTS:
#+begin_example
creating full factorial with 8 runs ...
   run.no run.no.std.rp threads processes class Blocks
1       1           8.1       2         2     A     .1
2       2           2.1       2         1     W     .1
3       3           6.1       2         1     A     .1
4       4           4.1       2         2     W     .1
5       5           3.1       1         2     W     .1
6       6           1.1       1         1     W     .1
7       7           7.1       1         2     A     .1
8       8           5.1       1         1     A     .1
9       9           5.2       1         1     A     .2
10     10           3.2       1         2     W     .2
11     11           6.2       2         1     A     .2
12     12           4.2       2         2     W     .2
13     13           1.2       1         1     W     .2
14     14           7.2       1         2     A     .2
15     15           8.2       2         2     A     .2
16     16           2.2       2         1     W     .2
class=design, type= full factorial 
NOTE: columns run.no and run.no.std.rp  are annotation, 
 not part of the data frame
#+end_example

A função ~fac.design~ gerou uma sequência aleatorizada de combinações
que serão executadas para que possamos avaliar a influência de cada
fator no desempenho da aplicação. Exportaremos o projeto gerado para
um arquivo ~csv~ que deverá ser registrado juntamente com os /logs/
contendo os resultados brutos do experimento. 

#+begin_src R :results output :exports both :session *R* :eval no-export
export.design(btmz_erad, 
              filename = "btmz-exec-order",
              type = "csv",
              replace = TRUE
              )
#+end_src

#+RESULTS:

*** Execução dos Experimentos
Faremos a execução dos experimentos na ordem definida no projeto
experimental. 

#+begin_src shell :results output :exports code :eval no-export
tail -n +2 btmz-exec-order.csv |
while IFS=, read -r name runnoinstdorder runno runnostdrp \
	 threads processes class Blocks
do
    # OpenMP threads
    runline="OMP_NUM_THREADS=$threads "
    # MPI processes
    runline+="mpirun -np $processes "
    # Binary
    runline+="bin/bt-mz.$class.x "
    # Log
    runline+="> btmz-$runno-$threads-$processes-$class.log"
 
    echo "Running >> $runline <<"
    eval $runline
    # eval $run
done 
#+end_src

* Análise de Dados
# R + tidyverse
* Criação de Gráficos
# ggplot2

* Local Variables                                                  :noexport:
# Local Variables:
# eval: (ox-extras-activate '(ignore-headlines))
# eval: (setq org-latex-listings t)
# eval: (setq org-latex-packages-alist '(("" "listings")))
# eval: (setq org-latex-packages-alist '(("" "listingsutf8")))
# eval: (setq ispell-local-dictionary "brasileiro")
# eval: (flyspell-mode t)
# End:

* Dockerfile                                                       :noexport:
#+begin_src fundamental :tangle tmp/Dockerfile
FROM r-base:3.5.1

RUN apt-get update && apt-get upgrade -y
RUN apt-get install -y libxml2-dev libssl-dev libcurl4-openssl-dev libgit2-dev
RUN apt-get install -y libboost-dev 

# Spack
RUN apt-get install -y git python curl autoconf file

# DoE.base
RUN apt-get install -y libgmp-dev

# RUN echo "install.packages(c('tidyverse', 'devtools'), repos = 'http://cran.us.r-project.org')" | R --vanilla
# RUN echo "install.packages(c('DoE.base'), repos = 'http://cran.us.r-project.org')" | R --vanilla
# RUN echo "install.packages('devtools', repos = 'http://cran.us.r-project.org')" | R --vanilla

RUN useradd -s /bin/bash --create-home user
USER user

ENTRYPOINT /bin/bash
WORKDIR /home/user
#+end_src
